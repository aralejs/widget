{"title":"Theme for Arale Documentation","meta":{"title":"Theme for Arale Documentation","filepath":"nico-arale/README.md","filename":"README","directory":"nico-arale","id":"nico-arale-readme","template":"post","category":"nico-arale"},"body":"\n这是一个为 [aralejs.org](http://aralejs.org) 文档设计的 [nico](http://lab.lepture.com/nico/) 主题。\n\n\n## 安装\n\n\n### 1. 安装 node\n\n请自己安装 node。\n\n\n### 2. 安装 nico\n\n参考 http://lab.lepture.com/nico/zh/\n\n另外，如果你安装了 socket.io 的话，将有 livereload 功能。\n\n```\n$ npm install socket.io -g\n```\n\n### 3. 安装 arale theme\n\nLinux & Mac 用户一键安装：\n\n```\ncurl https://raw.github.com/aralejs/nico-arale/master/bootstrap.sh | sh\n```\n\nWindows 用户安装：\n\n1.切换到.spm目录\n\n2.创建一个`themes`的目录并切换进入\n\n3.从git上拉一份arale的theme\n\n4.重命名`nico-arale`目录为`arale`\n\n5.切换到`arale`目录，把里面的`make.bat`文件复制到一个全局PATH下（保证make命令可用即可）\n\nP.S. __注意千万别把`C:\\Users\\{{username}}\\.spm\\themes\\arale`目录设置为全局PATH，这样`nico`命令会失效，切记！__\n\n```\ncd C:\\Users\\{{username}}\\.spm\n\nmkdir themes\ncd themes\n\ngit clone https://github.com/aralejs/nico-arale.git\n\nrename nico-arale arale\n\ncd arale\n```\n\n## 使用说明\n\n复制一份 [Makefile](https://github.com/aralejs/nico-arale/blob/master/Makefile) 到你的项目下：\n\nWindows 用户可使用 [make.bat](https://github.com/aralejs/nico-arale/blob/master/make.bat)。\n\n\n- `make build-doc` 用于生成文档。\n- `make debug` 是开启本地服务器，可用来预览文档，并提供自动构建和 live reload 支持。(从本地 sea-modules 中加载依赖)\n- `make watch` 是开启本地服务器，可用来预览文档，并提供自动构建和 live reload 支持。 (从线上加载依赖)\n- `make server` 普通服务器，无自动刷新功能。\n- `make publish` 发布站点到 gh pages，你需要安装 ghp-import\n\n    ```\n    sudo easy_install -U ghp-import\n    ```\n\nWindows 用户注意，如果报错，说找不到 nico，请设置环境变量 `NODE_PATH`。\n请根据实际情况自行解决，一般来说应该设置为：\n\n```\nNODE_PATH = C:\\Users\\{{username}}\\AppData\\Roaming\\npm\\node_modules\n```\n\n## 文档编辑\n\n- http://lab.lepture.com/nico/zh/\n- http://lab.lepture.com/nico/zh/syntax\n\nnico 还会用到模块根目录下的 package.json 文件，具体项的含义请参考：[spm package.json](https://github.com/spmjs/spm/wiki/package.json)\n\n其中 ``repository.url`` 用来生成 View the Project 链接， ``bugs.url`` 用来生成讨论链接。\n\n\n### 特有功能\n\n用三个 ` 会高亮显示代码\n\n    ```js\n    function something() {\n    }\n    ```\n\n用四个 ` 会高亮显示代码，还会将代码插入到生成的 HTML 页面中\n\n    ````js\n    function something() {\n    }\n    ````\n\n插入 iframe\n\n    ````iframe\n    <link rel=\"stylesheet\" href=\"css/some.css\">\n    <button>click</button>\n    <script>\n        seajs.use('jquery', function($) {\n            $('button').click(function() { alert('hello'); })\n        });\n    </script>\n    ````\n\n还可以设置 iframe 的高度\n\n    ````iframe:400\n    ````\n\n生成 iframe 的模板是 `templates/iframe.html`，不用写头写尾。\n\n\n\n## 输出\n\n假设模块的目录结构为：\n\n```\npackage.json\nMakefile\nsrc/\n    hello-world.js\nexamples/\n    hello-world.md\ndocs/\n    hello-world.md\nREADME.md\n```\n\n执行 `make build-doc` 后会生成：\n\n```\npackage.json\nMakefile\n_site/\n    index.html\n    src/\n        hello-world.js\n    examples/\n        hello-world.html\n    docs/\n        hello-world.html\nsrc/\n    hello-world.js\nexamples/\n    hello-world.md\ndocs/\n    hello-world.md\nREADME.md\n```\n\n所有生成的文件都在 `_site` 目录下。\n\n\n## 测试\n","abspath":"D:/workspace/demo/widget/nico-arale/README.md","filepath":"nico-arale/README.md","filename":"README","directory":"nico-arale","id":"nico-arale-readme","tags":[],"status":"public","html":"<p>这是一个为 <a href=\"http://aralejs.org\">aralejs.org</a> 文档设计的 <a href=\"http://lab.lepture.com/nico/\">nico</a> 主题。</p>\n<h2 id=\"安装\">安装</h2><h3 id=\"1-安装-node\">1. 安装 node</h3><p>请自己安装 node。</p>\n<h3 id=\"2-安装-nico\">2. 安装 nico</h3><p>参考 <a href=\"http://lab.lepture.com/nico/zh/\">http://lab.lepture.com/nico/zh/</a></p>\n<p>另外，如果你安装了 socket.io 的话，将有 livereload 功能。</p>\n<pre>$ npm install socket.io -g</pre><h3 id=\"3-安装-arale-theme\">3. 安装 arale theme</h3><p>Linux &amp; Mac 用户一键安装：</p>\n<pre>curl https://raw.github.com/aralejs/nico-arale/master/bootstrap.sh | sh</pre><p>Windows 用户安装：</p>\n<p>1.切换到.spm目录</p>\n<p>2.创建一个<code>themes</code>的目录并切换进入</p>\n<p>3.从git上拉一份arale的theme</p>\n<p>4.重命名<code>nico-arale</code>目录为<code>arale</code></p>\n<p>5.切换到<code>arale</code>目录，把里面的<code>make.bat</code>文件复制到一个全局PATH下（保证make命令可用即可）</p>\n<p>P.S. <strong>注意千万别把<code>C:\\Users\\{{username}}\\.spm\\themes\\arale</code>目录设置为全局PATH，这样<code>nico</code>命令会失效，切记！</strong></p>\n<pre>cd C:\\Users\\{{username}}\\.spm\n\nmkdir themes\ncd themes\n\ngit clone https://github.com/aralejs/nico-arale.git\n\nrename nico-arale arale\n\ncd arale</pre><h2 id=\"使用说明\">使用说明</h2><p>复制一份 <a href=\"https://github.com/aralejs/nico-arale/blob/master/Makefile\">Makefile</a> 到你的项目下：</p>\n<p>Windows 用户可使用 <a href=\"https://github.com/aralejs/nico-arale/blob/master/make.bat\">make.bat</a>。</p>\n<ul>\n<li><code>make build-doc</code> 用于生成文档。</li>\n<li><code>make debug</code> 是开启本地服务器，可用来预览文档，并提供自动构建和 live reload 支持。(从本地 sea-modules 中加载依赖)</li>\n<li><code>make watch</code> 是开启本地服务器，可用来预览文档，并提供自动构建和 live reload 支持。 (从线上加载依赖)</li>\n<li><code>make server</code> 普通服务器，无自动刷新功能。</li>\n<li><p><code>make publish</code> 发布站点到 gh pages，你需要安装 ghp-import</p>\n<pre>sudo easy_install -U ghp-import</pre></li>\n</ul>\n<p>Windows 用户注意，如果报错，说找不到 nico，请设置环境变量 <code>NODE_PATH</code>。\n请根据实际情况自行解决，一般来说应该设置为：</p>\n<pre>NODE_PATH = C:\\Users\\{{username}}\\AppData\\Roaming\\npm\\node_modules</pre><h2 id=\"文档编辑\">文档编辑</h2><ul>\n<li><a href=\"http://lab.lepture.com/nico/zh/\">http://lab.lepture.com/nico/zh/</a></li>\n<li><a href=\"http://lab.lepture.com/nico/zh/syntax\">http://lab.lepture.com/nico/zh/syntax</a></li>\n</ul>\n<p>nico 还会用到模块根目录下的 package.json 文件，具体项的含义请参考：<a href=\"https://github.com/spmjs/spm/wiki/package.json\">spm package.json</a></p>\n<p>其中 <code>repository.url</code> 用来生成 View the Project 链接， <code>bugs.url</code> 用来生成讨论链接。</p>\n<h3 id=\"特有功能\">特有功能</h3><p>用三个 ` 会高亮显示代码</p>\n<pre>```js\nfunction something() {\n}\n```\n\n</pre><p>用四个 ` 会高亮显示代码，还会将代码插入到生成的 HTML 页面中</p>\n<pre>````js\nfunction something() {\n}\n````\n\n</pre><p>插入 iframe</p>\n<pre>````iframe\n&lt;link rel=&quot;stylesheet&quot; href=&quot;css/some.css&quot;&gt;\n&lt;button&gt;click&lt;/button&gt;\n&lt;script&gt;\n    seajs.use(&#39;jquery&#39;, function($) {\n        $(&#39;button&#39;).click(function() { alert(&#39;hello&#39;); })\n    });\n&lt;/script&gt;\n````\n\n</pre><p>还可以设置 iframe 的高度</p>\n<pre>````iframe:400\n````\n\n</pre><p>生成 iframe 的模板是 <code>templates/iframe.html</code>，不用写头写尾。</p>\n<h2 id=\"输出\">输出</h2><p>假设模块的目录结构为：</p>\n<pre>package.json\nMakefile\nsrc/\n    hello-world.js\nexamples/\n    hello-world.md\ndocs/\n    hello-world.md\nREADME.md</pre><p>执行 <code>make build-doc</code> 后会生成：</p>\n<pre>package.json\nMakefile\n_site/\n    index.html\n    src/\n        hello-world.js\n    examples/\n        hello-world.html\n    docs/\n        hello-world.html\nsrc/\n    hello-world.js\nexamples/\n    hello-world.md\ndocs/\n    hello-world.md\nREADME.md</pre><p>所有生成的文件都在 <code>_site</code> 目录下。</p>\n<h2 id=\"测试\">测试</h2>","toc":"<ul><li><a href=\"#安装\">安装</a><ul><li><a href=\"#1-安装-node\">1. 安装 node</a></li><li><a href=\"#2-安装-nico\">2. 安装 nico</a></li><li><a href=\"#3-安装-arale-theme\">3. 安装 arale theme</a></li></ul></li><li><a href=\"#使用说明\">使用说明</a></li><li><a href=\"#文档编辑\">文档编辑</a><ul><li><a href=\"#特有功能\">特有功能</a></li></ul></li><li><a href=\"#输出\">输出</a></li><li><a href=\"#测试\">测试</a></li></ul>","iframes":{},"template":"post"}